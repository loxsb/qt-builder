name: build_qt6.5_android_ndk27_armv8

on: workflow_dispatch

env:
  QT_VERSION: 6.5.6
  QT_VERSION2: 6.5
  ANDROID_NDK_VERSION: 26.3.11579264
  ANDROID_JDK_VERSION: 17
  ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/26.3.11579264
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
  ANDROID_API: 26
  ANDROID_BUILD_TOOLS_VERSION: 26.0.0
  ARCH: arm64-v8a
  FILE_NAME: release_android_ndk27_armv8
  ROOT_DIR: /home/runner/work/qt-builder/qt-builder

jobs:
  android_armv8_release:
    runs-on: ubuntu-22.04

    steps:
    # 检出本仓库 /home/runner/work/qt-builder/qt-builder (仓库目录)
    - name: Checkout repository
      uses: actions/checkout@v4

    # 释放磁盘空间
    - name: Release disk space
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    # 修复 sources.list
    - name: Fix Ubuntu sources list
      run: |
        sudo cat << EOF | sudo tee /etc/apt/sources.list
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted

        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted

        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy universe
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy universe

        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates universe
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates universe

        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy multiverse

        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates multiverse

        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse

        deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security main restricted
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted

        deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security universe
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security universe

        deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security multiverse
        EOF

    # 安装更新 安装依赖
    - name: Install updates
      run: |
        cd ${{env.ROOT_DIR}}
        export DEBIAN_FRONTEND=noninteractive
        # sudo dpkg --add-architecture arm64
        sudo apt-get -y update
        sudo apt-get -y upgrade
        sudo apt-get -y install build-essential git perl python3 python3-pip ninja-build cmake libgl1-mesa-dev libglu1-mesa-dev p7zip-full \
        llvm-15 llvm-15-dev clang-15 libclang-15-dev
        sudo pip install html5lib

    # 安装android依赖
    - name: Install android dependencies
      run: |
        export JAVA_HOME=/usr/lib/jvm/java-${{env.ANDROID_JDK_VERSION}}-openjdk-amd64
        sudo apt-get install -y openjdk-${{env.ANDROID_JDK_VERSION}}-jdk sdkmanager
        sudo sdkmanager "platforms;android-${{env.ANDROID_API}}" "platform-tools" "build-tools;${{env.ANDROID_BUILD_TOOLS_VERSION}}"
        sudo sdkmanager "ndk;${{env.ANDROID_NDK_VERSION}}"
        ls -al /usr/local/lib/android/sdk
        ls -al /usr/local/lib/android/sdk/ndk

    # 下载源代码
    - name: Download source code
      run: |
        sudo apt-get install -y protobuf-compiler
        sudo git clone https://github.com/KDAB/android_openssl
        cd android_openssl
        sudo git checkout 0025bbe48f69792f95e02c9289df0fae68c954d6
        cd ..

        sudo curl -L -o qt-everywhere-src.tar.xz https://download.qt.io/official_releases/qt/${{env.QT_VERSION2}}/${{env.QT_VERSION}}/src/single/qt-everywhere-opensource-src-${{env.QT_VERSION}}.tar.xz
        sudo tar xvfp qt-everywhere-src.tar.xz

    # 编译Qt host
    - name: Build Qt host tools
      run: |
        sudo mkdir build-host
        cd build-host
        sudo ../qt-everywhere-src-${{env.QT_VERSION}}/configure -developer-build -nomake tests -nomake examples
        sudo cmake --build . --target host_tools --parallel $(($(nproc)+4))
        cd ..

    # 编译Qt
    - name: Build Qt
      run: |
        ls -al
        ls -al ${{env.ROOT_DIR}}/build-host
        ls -al ${{env.ROOT_DIR}}/build-host/qtbase
        ls -al ${{env.ROOT_DIR}}/build-host/qtbase/bin
        ls -al ${{env.ROOT_DIR}}/build-host/qtbase/lib
        
        sudo mkdir build
        sudo mkdir install

        ls -al /usr/local/lib/android/sdk/ndk

        cd build
        sudo ../qt-everywhere-src-${{env.QT_VERSION}}/configure -prefix ${{env.ROOT_DIR}}/install \
        -release -shared -force-debug-info -separate-debug-info \
        -nomake examples -nomake tests -opensource -confirm-license -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -qt-freetype \
        -platform android-clang -android-abis arm64-v8a -android-ndk-platform android-26 -android-ndk ${{env.ANDROID_NDK_ROOT}} -android-sdk ${{env.ANDROID_SDK_ROOT}} \
        -qt-host-path ${{env.ROOT_DIR}}/build-host/qtbase -openssl-linked \
        -- -DOPENSSL_USE_STATIC_LIBS=ON \
        -DOPENSSL_ROOT_DIR=${{env.ROOT_DIR}}/android_openssl/ssl_3 \
        -DOPENSSL_INCLUDE_DIR=${{env.ROOT_DIR}}/android_openssl/ssl_3/include \
        -DOPENSSL_CRYPTO_LIBRARY=${{env.ROOT_DIR}}/android_openssl/ssl_3/arm64-v8a/libcrypto.a \
        -DOPENSSL_SSL_LIBRARY=${{env.ROOT_DIR}}/android_openssl/ssl_3/arm64-v8a/libssl.a

        ls -al /usr/local/lib/android/sdk/ndk

        sudo cmake --build . --parallel $(($(nproc)+4))
        sudo cmake --install .
        cd ..

    # 打包
    - name: Package binaries
      run: |
        sudo 7z a Qt_${{env.QT_VERSION}}-${{env.FILE_NAME}}.7z ./install -mx=9

    # 上传
    - uses: actions/upload-artifact@v4
      with:
        name: Qt_${{env.QT_VERSION}}-${{env.FILE_NAME}}
        path: Qt_${{env.QT_VERSION}}-${{env.FILE_NAME}}.7z